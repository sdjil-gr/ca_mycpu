From f0c7634b677e44aa1cb514265d7298ae8d19d49f Mon Sep 17 00:00:00 2001
From: Sun Guangrun <sunguangrun22@mails.ucas.ac.cn>
Date: Sun, 20 Oct 2024 16:51:12 +0800
Subject: [PATCH] apply sram bus

---
 mycpu_top.v | 207 ++++++++++++++++++++++++++++++++++++++++++----------
 1 file changed, 168 insertions(+), 39 deletions(-)

diff --git a/mycpu_top.v b/mycpu_top.v
index e0ab5fe..74b152f 100644
--- a/mycpu_top.v
+++ b/mycpu_top.v
@@ -3,16 +3,24 @@ module mycpu_top(
     input  wire        clk,
     input  wire        resetn,
     // inst sram interface
-    output wire        inst_sram_en,
-    output wire [ 3:0] inst_sram_we,
+    output wire        inst_sram_req,
+    output wire        inst_sram_wr,
+    output wire [1:0]  inst_sram_size,
+    output wire [ 3:0] inst_sram_wstrb,
     output wire [31:0] inst_sram_addr,
     output wire [31:0] inst_sram_wdata,
+    input  wire        inst_sram_addr_ok,
+    input  wire        inst_sram_data_ok,
     input  wire [31:0] inst_sram_rdata,
     // data sram interface
-    output wire        data_sram_en,
-    output wire [ 3:0] data_sram_we,
+    output wire        data_sram_req,
+    output wire        data_sram_wr,
+    output wire [1:0] data_sram_size,
+    output wire [ 3:0] data_sram_wstrb,
     output wire [31:0] data_sram_addr,
     output wire [31:0] data_sram_wdata,
+    input  wire        data_sram_addr_ok,
+    input  wire        data_sram_data_ok,
     input  wire [31:0] data_sram_rdata,
     // trace debug interface
     output wire [31:0] debug_wb_pc,
@@ -46,6 +54,7 @@ reg  [31:0] pc;
 
 wire [14:0] alu_op;
 wire        load_op;
+wire        is_b;
 wire        src1_is_pc;
 wire        src2_is_imm;
 wire        res_from_mem;
@@ -225,8 +234,10 @@ wire [31:0] EX_final_result;
 wire [31:0] final_result;
 wire [31:0] mem_result;
 
-wire        data_sram_en_ID;
-wire [ 3:0] data_sram_we_ID;
+wire        data_sram_req_ID;
+wire        data_sram_wr_ID;
+wire [1:0]  data_sram_size_ID;
+wire [ 3:0] data_sram_wstrb_ID;
 wire [31:0] data_sram_addr_EX;
 wire [ 1:0] data_sram_addroffset;
 wire [31:0] data_sram_wdata_ID;
@@ -242,10 +253,14 @@ reg        need_div_r;
 reg        div_unsigned_r;
 reg        div_signed_r;
 reg        get_div_or_mod_r;
-reg        data_sram_en_EX;
-reg        data_sram_en_MEM;
-reg [ 3:0] data_sram_we_EX;
-reg [ 3:0] data_sram_we_MEM;
+reg        data_sram_req_EX;
+reg        data_sram_req_MEM;
+reg        data_sram_wr_EX;
+reg        data_sram_wr_MEM;
+reg [1:0]  data_sram_size_EX;
+reg [1:0]  data_sram_size_MEM;
+reg [ 3:0] data_sram_wstrb_EX;
+reg [ 3:0] data_sram_wstrb_MEM;
 reg [31:0] data_sram_addr_MEM;
 reg [31:0] data_sram_wdata_EX;
 reg [31:0] data_sram_wdata_MEM;
@@ -270,6 +285,10 @@ reg        is_rdcntvl_EX;
 reg        is_rdcntvh_EX;
 
 //添加握手信号
+wire IF_valid;
+wire IF_allowin;
+wire IF_readygo;
+
 reg ID_valid;
 wire ID_allowin;
 wire ID_readygo;
@@ -286,26 +305,103 @@ reg WB_valid;
 wire WB_allowin;
 wire WB_readygo;
 
+
+reg inst_first_woshou;
+always @(posedge clk) begin
+    if (reset) begin
+        inst_first_woshou <= 1'b0;
+    end
+    else if(IF_readygo) begin
+        inst_first_woshou <= 1'b0;
+    end
+    else if(inst_sram_addr_ok&&inst_sram_req) begin
+        inst_first_woshou <= 1'b1;
+    end
+end
+reg data_first_woshou;
+always @(posedge clk) begin
+    if (reset) begin
+        data_first_woshou <= 1'b0;
+    end
+    else if(MEM_readygo) begin
+        data_first_woshou <= 1'b0;
+    end
+    else if(data_sram_addr_ok&&data_sram_req) begin
+        data_first_woshou <= 1'b1;
+    end
+end
+reg br_taken_ID_r;
+reg br_taken_EX_r;
+reg [31:0]nextpc_r;
+always @(posedge clk) begin
+    if (reset) begin
+        br_taken_ID_r <= 1'b0;
+        nextpc_r <= 32'h0;
+        br_taken_EX_r <= 1'b0;
+    end
+    else if(exc_at_EX)begin
+        nextpc_r <= br_target;
+        br_taken_EX_r <= br_taken_EX;
+    end
+    else if(has_int||exc_at_ID)begin
+        br_taken_ID_r <= br_taken_ID;
+        nextpc_r <= br_target;
+    end
+    else if(IF_readygo)begin
+        br_taken_ID_r <= 1'b0;
+        nextpc_r <= 32'h0;
+        br_taken_EX_r <= 1'b0;
+    end
+    else if(ID_readygo && !IF_readygo && ID_valid) begin
+        br_taken_ID_r <= br_taken_ID;
+        nextpc_r <= br_target;
+        br_taken_EX_r <= br_taken_EX;
+    end
+end
+//指令寄存器
+reg [31:0]inst_ID;
+reg is_inst_ID;
+always @(posedge clk) begin
+    if (reset) begin
+        inst_ID <= 32'h0;
+        is_inst_ID <= 1'b0;
+    end
+    else if(ID_readygo && EX_allowin)begin
+        inst_ID <= inst_sram_rdata;
+        is_inst_ID <= 1'b0;
+    end
+    else if(IF_readygo && !ID_allowin)begin
+        inst_ID <= inst_sram_rdata;
+        is_inst_ID <= 1'b1;
+    end
+
+end
 //握手信号处理
 /****************************************************************************/
-assign ID_readygo = valid_r ? !hit_wait : 1'b1;//访存前递阻塞
+assign IF_readygo = inst_first_woshou && inst_sram_data_ok;
+assign ID_readygo = (valid_r ? !hit_wait : 1'b1);//访存前递阻塞
 assign EX_readygo = !need_div_r;//阻塞除法
-assign MEM_readygo = 1'b1;
+assign MEM_readygo = (data_first_woshou & &data_sram_data_ok && data_sram_req_MEM) || !data_sram_req_MEM;
 assign WB_readygo = 1'b1;
 
+
 assign ID_allowin  = (!ID_valid  || EX_allowin  && ID_readygo )&&valid;
 assign EX_allowin  = (!EX_valid  || MEM_allowin && EX_readygo )&&valid;
 assign MEM_allowin = (!MEM_valid || WB_allowin  && MEM_readygo)&&valid;
 assign WB_allowin  = (!WB_valid  ||                WB_readygo )&&valid;
 
 //流水级控制
+assign IF_valid = 1'b1;
+
 always @(posedge clk) begin
     if (reset)
 		ID_valid <= 1'b0;
+    else if((br_taken_ID_r || br_taken_EX_r) && ID_allowin && IF_readygo && IF_valid)
+        ID_valid <= 1'b0;
     else if ((br_taken_ID || br_taken_EX) && ID_allowin)//分支跳转则把预取的错误指令取消
         ID_valid <= 1'b0;
 	else if(ID_allowin)
-		ID_valid <= 1'b1;
+		ID_valid <= IF_valid && IF_readygo;
 end
 always @(posedge clk) begin
 	if (reset)
@@ -359,14 +455,20 @@ always @(posedge clk) begin
     if (reset) begin
         pc <= 32'h1c000000;     //trick: to make nextpc be 0x1c000000 during reset 
     end
-    else if(ID_allowin)begin
+    else if(has_int||exc_at_ID||exc_at_EX)begin
+        pc <= br_target;
+    end
+    else if(ID_allowin && IF_readygo)begin
+        if(br_taken_ID_r||br_taken_EX_r)
+        pc <= nextpc_r;
+        else
         pc <= nextpc;
     end
 end
 always @(posedge clk) begin
     if (reset)
         pc_ID <= 32'h1bfffffc;
-    else if(ID_allowin)
+    else if(ID_allowin && IF_readygo)
         pc_ID <= pc;
 end
 always @(posedge clk) begin
@@ -419,8 +521,19 @@ assign exc_at_ID = exc_break || exc_syscall || exc_adef || exc_ine;
 assign exc_at_EX = exc_ale;
 
 assign wb_ex = exc_at_ID || exc_at_EX || has_int;
-assign wb_pc = (exc_adef) ? pc :
-               (!br_taken_EX && ID_valid) ? pc_ID :
+
+reg pc_ID_is_b;
+always @(posedge clk) begin
+    if (reset) begin
+        pc_ID_is_b <= 1'b0;
+    end
+    else if(ID_allowin && IF_readygo) begin
+        pc_ID_is_b <= is_b;
+    end
+end
+assign wb_pc =  (exc_adef) ? pc :
+                (has_int||exc_at_ID) ? ((ID_valid)?pc_ID:(pc_ID_is_b)?pc_ID:pc) :
+                (!br_taken_EX && ID_valid || br_taken_ID_r) ?  pc_ID :
                 pc_EX;
 assign ertn_flush = inst_ertn && ID_valid;
 assign wb_ecode = has_int     ? `ECODE_INT :
@@ -431,7 +544,6 @@ assign wb_ecode = has_int     ? `ECODE_INT :
                   exc_ine     ? `ECODE_INE :
                   6'h0;
 assign wb_esubcode = 9'h0;
-
 csr u_csr(
     .clk(clk),
     .reset(reset),
@@ -457,15 +569,19 @@ csr u_csr(
 
 //IF流水级
 /****************************************************************************/
-assign inst_sram_en    = ID_allowin && !exc_adef;//取值地址异常时不进行取指
-assign inst_sram_we    = 4'b0;
-assign inst_sram_addr  = pc;
-assign inst_sram_wdata = 32'b0;
-assign inst = inst_sram_rdata;
+assign inst_sram_req    = !inst_first_woshou&&ID_allowin && !exc_adef;//取值地址异常时不进行取指
+assign inst_sram_wstrb  = 4'b0;
+assign inst_sram_wr     = 1'b0;
+assign inst_sram_size   = 2'b10;
+assign inst_sram_addr   = pc;
+assign inst_sram_wdata  = 32'b0;
+assign inst = (is_inst_ID)?inst_ID:inst_sram_rdata;
 /****************************************************************************/
 
 
 
+
+
 // IF  --->  ID
 
 // inst      指令
@@ -626,7 +742,7 @@ assign rd_pro = (rd == dest_EX_ID) ? EX_final_result :
                 (rd == dest_MEM_ID) ? data_sram_addr_MEM :
                 final_result ;
 
-assign hit_wait = reg_EX_hit && data_sram_en_EX || reg_MEM_hit && data_sram_en_MEM;
+assign hit_wait = reg_EX_hit && data_sram_req_EX || reg_MEM_hit && data_sram_req_MEM;
 /******** 前递块 ********/
 
 
@@ -704,6 +820,7 @@ assign rj_lt_rd = $signed(rj_sign) < $signed(rd_sign);
 
 assign rj_eq_rd = (rj_value == rkd_value);
 // - 将跳转分为在ID的跳转以及在EX的跳转，EX的跳转相比ID的跳转额外取消一条错取指令
+assign is_b = inst_beq | inst_bne | inst_blt | inst_bge | inst_bltu | inst_bgeu | inst_jirl | inst_b;
 assign br_taken_ID = (   inst_beq  &&  rj_eq_rd
                    || inst_bne  && !rj_eq_rd
                    || inst_blt  &&  rj_lt_rd
@@ -731,8 +848,10 @@ assign div_signed = inst_div_w | inst_mod_w;
 assign div_unsigned = inst_div_wu | inst_mod_wu;
 assign get_div_or_mod = inst_div_w | inst_div_wu;
 
-assign data_sram_en_ID    = inst_ld_b | inst_ld_h | inst_ld_bu | inst_ld_hu | inst_ld_w | inst_st_b | inst_st_h | inst_st_w;
-assign data_sram_we_ID    = {4{inst_st_w}} | {2'b00, {2{inst_st_h}}} | {3'b000, inst_st_b};
+assign data_sram_req_ID    = inst_ld_b | inst_ld_h | inst_ld_bu | inst_ld_hu | inst_ld_w | inst_st_b | inst_st_h | inst_st_w;
+assign data_sram_wr_ID   = inst_st_b | inst_st_h | inst_st_w;
+assign data_sram_size_ID = (inst_ld_b | inst_ld_bu | inst_st_b )?2'b00:(inst_ld_h | inst_ld_hu | inst_st_h)?2'b01:2'b10;
+assign data_sram_wstrb_ID    = {4{inst_st_w}} | {2'b00, {2{inst_st_h}}} | {3'b000, inst_st_b};
 assign data_sram_wdata_ID = inst_st_b ? {4{rkd_value[ 7:0]}} :
                             inst_st_h ? {2{rkd_value[15:0]}} :
                             rkd_value;
@@ -788,16 +907,20 @@ always @(posedge clk) begin //寄存器控制
 end
 always @(posedge clk) begin //访存控制
     if(reset) begin
-        data_sram_en_EX <= 1'b0;
-        data_sram_we_EX <= 4'b0;
+        data_sram_req_EX <= 1'b0;
+        data_sram_wstrb_EX <= 4'b0;
         data_sram_wdata_EX <= 32'h0;
         data_sram_type_tag_EX <= 4'b0;
+        data_sram_size_EX <= 2'b0;
+        data_sram_wr_EX <= 1'b0;
     end
     else if(ID_valid && EX_allowin && ID_readygo) begin
-        data_sram_en_EX <= data_sram_en_ID;
-        data_sram_we_EX <= data_sram_we_ID;
+        data_sram_req_EX <= data_sram_req_ID;
+        data_sram_wstrb_EX <= data_sram_wstrb_ID;
         data_sram_wdata_EX <= data_sram_wdata_ID;
         data_sram_type_tag_EX <= data_sram_type_tag;
+        data_sram_size_EX <= data_sram_size_ID;
+        data_sram_wr_EX <= data_sram_wr_ID;
     end
 end
 /****************************************************************************/
@@ -807,7 +930,7 @@ end
 
 // alu_src1_r, alu_src2_r, alu_op_r      alu相关信号
 // res_from_mem_EX, dest_EX, gr_we_EX      寄存器相关信号
-// data_sram_en_EX, data_sram_we_EX, data_sram_wdata_EX      访存相关信号
+// data_sram_req_EX, data_sram_wstrb_EX, data_sram_wdata_EX      访存相关信号
 // sdiv_sor_valid, sdiv_dend_valid, need_div_r      除法器相关信号
 // PC_EX
 
@@ -900,18 +1023,22 @@ assign data_sram_addr_EX  = EX_final_result;//设计访存地址
 //将一些后续控制信号从EX传递下去
 always @(posedge clk) begin//访存控制
     if(reset) begin
-        data_sram_en_MEM <= 1'b0;
-        data_sram_we_MEM <= 4'b0;
+        data_sram_req_MEM <= 1'b0;
+        data_sram_wstrb_MEM <= 4'b0;
         data_sram_addr_MEM <= 32'h0;
         data_sram_wdata_MEM <= 32'h0;
         data_sram_type_tag_MEM <= 4'b0;
+        data_sram_size_MEM <= 2'b0;
+        data_sram_wr_MEM <= 1'b0;
     end
     else if(MEM_allowin && EX_valid && EX_readygo) begin
-        data_sram_en_MEM <= data_sram_en_EX;
-        data_sram_we_MEM <= (data_sram_we_EX << alu_result[1:0]);
+        data_sram_req_MEM <= data_sram_req_EX;
+        data_sram_wstrb_MEM <= (data_sram_wstrb_EX << alu_result[1:0]);
         data_sram_addr_MEM <= data_sram_addr_EX;
         data_sram_wdata_MEM <= data_sram_wdata_EX;
         data_sram_type_tag_MEM <= data_sram_type_tag_EX;
+        data_sram_size_MEM <= data_sram_size_EX;
+        data_sram_wr_MEM <= data_sram_wr_EX;
     end
 end
 always @(posedge clk) begin//寄存器控制
@@ -932,7 +1059,7 @@ end
 
 //EX --> MEM
 
-// data_sram_en_MEM, data_sram_we_MEM, data_sram_addr_MEM, data_sram_wdata_MEM, data_sram_type_tag_MEM      访存相关信号
+// data_sram_req_MEM, data_sram_wstrb_MEM, data_sram_addr_MEM, data_sram_wdata_MEM, data_sram_type_tag_MEM      访存相关信号
 // res_from_mem_MEM, dest_MEM, gr_we_MEM      寄存器相关信号
 // PC_MEM
 
@@ -941,9 +1068,11 @@ end
 //MEM流水级
 /****************************************************************************/
 //设置访存信号
-assign data_sram_en = data_sram_en_MEM & MEM_valid & MEM_readygo; // - 小补丁，防止后续埋雷
-assign data_sram_we = data_sram_we_MEM;
-assign data_sram_addr = {data_sram_addr_MEM[31:2], 2'b00};//对齐地址
+assign data_sram_req = !data_first_woshou &&data_sram_req_MEM && MEM_valid ; // - 小补丁，防止后续埋雷
+assign data_sram_wr = data_sram_wr_MEM & MEM_valid ; // - 小补丁，防止后续埋雷
+assign data_sram_size = data_sram_size_MEM ;
+assign data_sram_wstrb = data_sram_wstrb_MEM;
+assign data_sram_addr = data_sram_addr_MEM;
 assign data_sram_addroffset = data_sram_addr_MEM[1:0];//访存偏移
 assign data_sram_wdata = data_sram_wdata_MEM;
 
-- 
2.44.0.windows.1

