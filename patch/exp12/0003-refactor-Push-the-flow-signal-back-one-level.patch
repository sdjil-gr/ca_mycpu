From a5f0a49aae48434a12f4a10e69ae7e51185a3eee Mon Sep 17 00:00:00 2001
From: sdjil <26917049@qq.com>
Date: Sat, 12 Oct 2024 16:17:13 +0800
Subject: [PATCH 2/2] refactor: Push the flow signal back one level to make it
 more compliant.(No effect)

---
 myCPU/mycpu_top.v | 76 ++++++++++++++++++++---------------------------
 1 file changed, 32 insertions(+), 44 deletions(-)

diff --git a/myCPU/mycpu_top.v b/myCPU/mycpu_top.v
index e402351..6e10653 100644
--- a/myCPU/mycpu_top.v
+++ b/myCPU/mycpu_top.v
@@ -248,10 +248,6 @@ reg        is_csr_EX;
 reg [31:0] csr_rvalue_EX;
 
 //添加握手信号
-reg IF_valid;
-wire IF_allowin;
-wire IF_readygo;
-
 reg ID_valid;
 wire ID_allowin;
 wire ID_readygo;
@@ -270,32 +266,24 @@ wire WB_readygo;
 
 //握手信号处理
 /****************************************************************************/
-assign IF_readygo = valid_r ? !hit_wait : 1'b1;//访存前递阻塞
-assign ID_readygo = !need_div_r;//阻塞除法
-assign EX_readygo = 1'b1;
+assign ID_readygo = valid_r ? !hit_wait : 1'b1;//访存前递阻塞
+assign EX_readygo = !need_div_r;//阻塞除法
 assign MEM_readygo = 1'b1;
 assign WB_readygo = 1'b1;
 
-assign IF_allowin = (!IF_valid  || ID_allowin  && IF_readygo )&&valid;
 assign ID_allowin = (!ID_valid  || EX_allowin  && ID_readygo )&&valid;
-assign EX_allowin = (!EX_valid  || MEM_allowin && EX_readygo )&&valid;
-assign MEM_allowin =(!MEM_valid || WB_allowin  && MEM_readygo)&&valid;
-assign WB_allowin = (!WB_valid  ||                WB_readygo )&&valid;
+assign EX_allowin = (!EX_valid  || MEM_allowin  && EX_readygo )&&valid;
+assign MEM_allowin = (!MEM_valid  || WB_allowin && MEM_readygo )&&valid;
+assign WB_allowin =(!WB_valid || WB_allowin  && WB_readygo)&&valid;
 
 //流水级控制
 always @(posedge clk) begin
     if (reset)
-		IF_valid <= 1'b0;
-    else if (br_taken && IF_allowin)//分支跳转则把预取的错误指令取消
-        IF_valid <= 1'b0;
-	else if(IF_allowin)
-		IF_valid <= 1'b1;
-end
-always @(posedge clk) begin
-	if (reset)
 		ID_valid <= 1'b0;
+    else if (br_taken && ID_allowin)//分支跳转则把预取的错误指令取消
+        ID_valid <= 1'b0;
 	else if(ID_allowin)
-		ID_valid <= IF_valid && IF_readygo;
+		ID_valid <= 1'b1;
 end
 always @(posedge clk) begin
 	if (reset)
@@ -328,32 +316,32 @@ always @(posedge clk) begin
     if (reset) begin
         pc <= 32'h1c000000;     //trick: to make nextpc be 0x1c000000 during reset 
     end
-    else if(IF_allowin)begin
+    else if(ID_allowin)begin
         pc <= nextpc;
     end
 end
 always @(posedge clk) begin
     if (reset)
         pc_ID <= 32'h1bfffffc;
-    else if(IF_allowin)
+    else if(ID_allowin)
         pc_ID <= pc;
 end
 always @(posedge clk) begin
     if (reset)
         pc_EX <= 32'h1bfffffc;
-    else if(ID_allowin && IF_valid && IF_readygo)
+    else if(EX_allowin && ID_valid && ID_readygo)
         pc_EX <= pc_ID;
 end
 always @(posedge clk) begin
     if (reset)
         pc_MEM <= 32'h1bfffffc;
-    else if(EX_allowin && ID_valid && ID_readygo)
+    else if(MEM_allowin && EX_valid && EX_readygo)
         pc_MEM <= pc_EX;
 end
 always @(posedge clk) begin
     if (reset)
         pc_WB <= 32'h1bfffffc;
-    else if(MEM_allowin && EX_valid && EX_readygo)
+    else if(WB_allowin && MEM_valid && MEM_readygo)
         pc_WB <= pc_MEM;
 end
 /****************************************************************************/
@@ -361,14 +349,14 @@ end
 
 //控制状态寄存器
 /****************************************************************************/
-assign csr_re = (inst_csrrd || inst_csrwr || inst_csrxchg) && IF_valid && IF_readygo;
-assign csr_we = (inst_csrwr || inst_csrxchg) && IF_valid && IF_readygo;
+assign csr_re = (inst_csrrd || inst_csrwr || inst_csrxchg) && ID_valid && ID_readygo;
+assign csr_we = (inst_csrwr || inst_csrxchg) && ID_valid && ID_readygo;
 assign csr_wmask = (inst_csrwr)? 32'hffffffff :
                     (inst_csrxchg)? rj_value : 32'h00000000;
 assign csr_wvalue = rkd_value;
 
-assign wb_ex = inst_syscall && IF_valid && IF_readygo;
-assign ertn_flush = inst_ertn && IF_valid && IF_readygo;
+assign wb_ex = inst_syscall && ID_valid && ID_readygo;
+assign ertn_flush = inst_ertn && ID_valid && ID_readygo;
 assign wb_ecode = 6'hb;
 assign wb_esubcode = 9'h0;
 
@@ -394,7 +382,7 @@ csr u_csr(
 
 //IF流水级
 /****************************************************************************/
-assign inst_sram_en    = IF_allowin;
+assign inst_sram_en    = ID_allowin;
 assign inst_sram_we    = 4'b0;
 assign inst_sram_addr  = pc;
 assign inst_sram_wdata = 32'b0;
@@ -533,9 +521,9 @@ assign need_rk    =  inst_add_w | inst_sub_w | inst_slt | inst_sltu | inst_and |
                 inst_mul_w | inst_mulh_w | inst_mulh_wu | inst_div_w | inst_mod_w | inst_div_wu | inst_mod_wu; 
 assign need_rd    =  inst_beq | inst_bne | inst_st_b | inst_st_h | inst_st_w | inst_blt | inst_bge | inst_bltu | inst_bgeu | inst_csrwr | inst_csrxchg;
 
-assign dest_EX_ID = dest_EX & {5{gr_we_EX}} & {5{ID_valid}};
-assign dest_MEM_ID = dest_MEM & {5{gr_we_MEM}} & {5{EX_valid}};
-assign dest_WB_ID = dest_WB & {5{gr_we_WB}} & {5{MEM_valid}};
+assign dest_EX_ID = dest_EX & {5{gr_we_EX}} & {5{EX_valid}};
+assign dest_MEM_ID = dest_MEM & {5{gr_we_MEM}} & {5{MEM_valid}};
+assign dest_WB_ID = dest_WB & {5{gr_we_WB}} & {5{WB_valid}};
 
 assign rj_hit = need_rj && (rj != 5'd0) && ((rj == dest_EX_ID) || (rj == dest_MEM_ID) || (rj == dest_WB_ID));
 assign rk_hit = need_rk && (rk != 5'd0) && ((rk == dest_EX_ID) || (rk == dest_MEM_ID) || (rk == dest_WB_ID));
@@ -642,7 +630,7 @@ assign br_taken = (   inst_beq  &&  rj_eq_rd
                    || inst_b
                    || inst_ertn
                    || inst_syscall
-                  ) && IF_valid;
+                  ) && ID_valid;
 assign br_target =  (inst_beq || inst_bne || inst_bl || inst_b || inst_blt || inst_bge || inst_bltu || inst_bgeu) ? (pc_ID + br_offs) :
                     (inst_ertn)?ex_epc:
                     (inst_syscall)?ex_entry:
@@ -674,7 +662,7 @@ always @(posedge clk) begin
         div_unsigned_r <= 1'b0;
         get_div_or_mod_r <= 1'b0;
     end
-    else if(IF_valid && ID_allowin && IF_readygo)begin
+    else if(ID_valid && EX_allowin && ID_readygo)begin
         alu_src1_r <= alu_src1;
         alu_src2_r <= alu_src2;
         alu_op_r   <= alu_op;
@@ -689,7 +677,7 @@ always @(posedge clk) begin //寄存器控制
         is_csr_EX <= 1'b0;
         csr_rvalue_EX <= 32'h0;
     end
-    else if(ID_allowin && IF_valid && IF_readygo) begin
+    else if(EX_allowin && ID_valid && ID_readygo) begin
         is_csr_EX <= csr_re;
         csr_rvalue_EX <= csr_rvalue;
     end
@@ -700,7 +688,7 @@ always @(posedge clk) begin //寄存器控制
         dest_EX <= 5'd0;
         gr_we_EX <= 1'b0;
     end
-    else if(ID_allowin && IF_valid && IF_readygo) begin
+    else if(EX_allowin && ID_valid && ID_readygo) begin
         res_from_mem_EX <= res_from_mem;
         dest_EX <= dest;
         gr_we_EX <= gr_we;
@@ -713,7 +701,7 @@ always @(posedge clk) begin //访存控制
         data_sram_wdata_EX <= 32'h0;
         data_sram_ld_tag_EX <= 3'b0;
     end
-    else if(IF_valid && ID_allowin && IF_readygo) begin
+    else if(ID_valid && EX_allowin && ID_readygo) begin
         data_sram_en_EX <= data_sram_en_ID;
         data_sram_we_EX <= data_sram_we_ID;
         data_sram_wdata_EX <= data_sram_wdata_ID;
@@ -744,7 +732,7 @@ always @(posedge clk) begin
         udiv_sor_valid <= 1'b0;
         udiv_dend_valid <= 1'b0;
     end
-    else if(IF_valid && ID_allowin && IF_readygo) begin
+    else if(ID_valid && EX_allowin && ID_readygo) begin
         sdiv_sor_valid <= div_signed;
         sdiv_dend_valid <= div_signed;
         udiv_sor_valid <= div_unsigned;
@@ -765,7 +753,7 @@ always @(posedge clk) begin
     if(reset) begin
         need_div_r <= 1'b0;
     end
-    else if(IF_valid && ID_allowin && IF_readygo) begin
+    else if(ID_valid && EX_allowin && ID_readygo) begin
         need_div_r <= need_div;
     end
     else if (sdiv_out_valid || udiv_out_valid)  begin
@@ -823,7 +811,7 @@ always @(posedge clk) begin//访存控制
         data_sram_wdata_MEM <= 32'h0;
         data_sram_ld_tag_MEM <= 3'b0;
     end
-    else if(EX_allowin && ID_valid && ID_readygo) begin
+    else if(MEM_allowin && EX_valid && EX_readygo) begin
         data_sram_en_MEM <= data_sram_en_EX;
         data_sram_we_MEM <= (data_sram_we_EX << alu_result[1:0]);
         data_sram_addr_MEM <= data_sram_addr_EX;
@@ -837,7 +825,7 @@ always @(posedge clk) begin//寄存器控制
         dest_MEM <= 5'd0;
         gr_we_MEM <= 1'b0;
     end
-    else if(EX_allowin && ID_valid && ID_readygo) begin
+    else if(MEM_allowin && EX_valid && EX_readygo) begin
         res_from_mem_MEM <= res_from_mem_EX;
         dest_MEM <= dest_EX;
         gr_we_MEM <= gr_we_EX;
@@ -874,7 +862,7 @@ always @(posedge clk) begin
         data_sram_ld_tag_WB <= 3'b0;
         data_sram_addroffset_WB <= 2'b0;
     end
-    else if(MEM_allowin && EX_valid && EX_readygo) begin
+    else if(WB_allowin && MEM_valid && MEM_readygo) begin
         alu_result_WB <= data_sram_addr_MEM;
         res_from_mem_WB <= res_from_mem_MEM;
         dest_WB <= dest_MEM;
@@ -903,7 +891,7 @@ assign mem_result   = data_sram_ld_tag_WB[2]? {{24{data_sram_rdata_off[7] & ~dat
 /****************************************************************************/
 assign final_result = res_from_mem_WB ? mem_result : alu_result_WB; // 最终写回数据
 
-assign rf_we    = gr_we_WB && MEM_valid && MEM_readygo;
+assign rf_we    = gr_we_WB && WB_valid && WB_readygo;
 assign rf_waddr = dest_WB;
 assign rf_wdata = final_result;
 /****************************************************************************/
-- 
2.44.0.windows.1

